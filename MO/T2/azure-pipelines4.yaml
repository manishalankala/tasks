trigger: 
- none
resources:
- repo: self
pool:
  vmImage: ubuntu-latest

stages:
- stage: Build
  displayName: Build 
  jobs:
  - job: build
    displayName: build-job1
    steps:
    - task: Docker@2
      displayName: "Docker Build"
      inputs:
        containerregistrytype: 'Azure Container Registry'
        command: 'build'
        Dockerfile: '**/Dockerfile'
        buildContext: '.'


- stage: Push
  displayName: Push
  jobs:
  - job: Push
    displayName: Push-job2
    steps:
    - task: Docker@2
      displayName: "Docker Push"
      inputs:
        containerregistrytype: 'Azure Container Registry'
        command: 'push'


- stage: Compose
  displayName: Compose
  jobs:
  - job: Compose
    displayName: Compose-job2
    steps:
    - task: DockerCompose@0
      displayName: Build images
      inputs:
        containerregistrytype: 'Azure Container Registry'
        dockerComposeFile: '**/docker-compose.yml'
        action: 'Run a Docker Compose command'
        dockerComposeCommand: 'up --build'


- stage: Deploy_to_environment 
  displayName: 'Deploy to Env'
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop

          - task: AzureWebApp@1
            inputs: 
                azureSubscription: 'XXXXXXXXXXXXXXXXXXX'
                appName: 'app1'
                appType: webAppLinux
                package: '$(Pipeline.Workspace)/**/*.zip'

- stage: Deploy to terraform
  display: 'via terraform'
  jobs:
  - deployment: Deploy_Terraform
    pool:
      vmImage: 'ubuntu-latest'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: terraform.azure-pipelines-terraform-cli.TerraformCLI@0
              displayName: 'terraform init'
              inputs:
                command: init
                workingDirectory: 
                backendType: azurerm
                backendserviceArm: ''
                backendAzureRmResourceGroupName: ''
                backendAzureRmStorageAccountName: ''
                backendAzureRmContainerName: ''
                backendAzureRmkey: ''
            - task: terraform.azure-pipelines-terraform-cli.TerraformCLI@0
              displayName: 'terraform plan'
              inputs:
                command: plan
                workingDirectory:
                terraformVe4rsion: 0.12.49
            - task: terraform.azure-pipelines-terraform-cli.TerraformCLI@0
              displayName: 'terraform apply'
              inputs:
                command: plan
                workingDirectory:
                environmentServiceName: ''
                terraformVe4rsion: 0.12.49
